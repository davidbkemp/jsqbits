/**
 * General case of the "Period Finding" problem.
 * For any function where f(x) = f(x + r), this algorithm will find r.
 */

var numOutBits = 6;
var numInBits = 2 * numOutBits;
var inputRange = Math.pow(2,numInBits);
var outputRange = Math.pow(2,numOutBits);

function findPeriod(f, callback) {
    var accuracyRequiredForContinuedFraction = 1/(2 * outputRange * outputRange);
    var outBits = {from: 0, to: numOutBits - 1};
    var inputBits = {from: numOutBits, to: numOutBits + numInBits - 1};
    var attempts = 0;
    var successes = 0;
    var bestSoFar = 1;
    var bestSoFarIsAPeriod = false;
    var f0 = f(0);

    function continueFindingPeriod() {
        if (successes === numOutBits || attempts === 2 * numOutBits) {
            callback(bestSoFar);
            return;
        }

        var qstate = new jsqbits.QState(numInBits + numOutBits).hadamard(inputBits);
        qstate = qstate.applyFunction(inputBits, outBits, f);
        // We do not need to measure the outBits, but it does speed up the simulation.
        qstate = qstate.measure(outBits).newState;
        var result = qstate.qft(inputBits).measure(inputBits).result;
        var continuedFraction = jsqbitsmath.continuedFraction(result/inputRange, accuracyRequiredForContinuedFraction);
        var candidate = continuedFraction.denominator;
        print("Candidate period: " + candidate);
        // Reduce the chances of getting the wrong answer by ignoring obviously wrong results!
        if (candidate <= outputRange && candidate > 1) {
            var lcm = jsqbitsmath.lcm(candidate, bestSoFar)
            if (lcm <= outputRange) {
                print("This is a good candidate.");
                bestSoFar = lcm;
                if (f(bestSoFar) === f0) bestSoFarIsAPeriod = true;
                successes++;
            } else if(!bestSoFarIsAPeriod && f(candidate) === f0) {
                print("This is a much better candidate");
                bestSoFar = candidate;
                bestSoFarIsAPeriod = true;
                successes++;
            }
        }
        attempts++;
        print("Best period so far: " + bestSoFar + ". Attempts: " + attempts + ". Good candidates: " + successes);
        // Yield control for a millisecond to give the browser a chance to print to the console.
        setTimeout(continueFindingPeriod, 1);
    }

    continueFindingPeriod();
}

var f = promptForFunction("Enter a function where f(x) = f(x+r) for some r less than " + outputRange, "function(x) {return x % 16;}");

findPeriod(f, function(period) {
        if (f(0) === f(period)) {
            print("The period of your function is " + period);
        } else {
            print("Could not find period.  Best effort was: " + period);
        }
    }
);


